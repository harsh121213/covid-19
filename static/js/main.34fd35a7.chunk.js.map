{"version":3,"sources":["components/card/card.module.css","components/card/card.jsx","axios.jsx","components/chart/chart.jsx","components/country/country.jsx","App.js","serviceWorker.js","index.js","App.module.css","components/chart/chart.module.css","components/country/country.module.css","covid.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justufy","item","component","Card","xs","md","cx","card","Infected","CardContent","Typography","color","gutterBottom","varaint","start","end","value","Date","toDateString","active","url","FetchData","country","a","changeurl","axios","get","modified","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","countries","name","console","log","Chart","useState","setdailydata","useEffect","fetchAPI","barchart","labels","datasets","label","backgroundColor","option","legent","display","title","text","linechart","length","borderColor","fill","Country","handlecountrychange","fetchcountries","setfetchcountries","FormControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchdata","setState","Fetchdata","this","image","src","covid","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.34fd35a7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"card_container__HV2Ie\",\"card\":\"card_card__2DORf\",\"Infected\":\"card_Infected__2P8dr\",\"recovered\":\"card_recovered__2mIcU\",\"deaths\":\"card_deaths__OGbA2\",\"active\":\"card_active__2VhQ8\"};","import React from 'react';\r\nimport {Card,CardContent,Typography,Grid} from '@material-ui/core';\r\nimport styles from './card.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nconst Cards=({data:{confirmed,recovered,deaths,lastUpdate}})=>{\r\n    if(!confirmed)\r\n    return \"loding...\";\r\n    return(\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justufy=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.Infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Infected\r\n                        </Typography>\r\n                        <Typography varaint=\"h5\">\r\n                            <CountUp start={0} end={confirmed.value} ></CountUp>\r\n                        </Typography>\r\n                   <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                  <Typography varaint=\"body2\">Total number Of  Cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Infected\r\n                        </Typography>\r\n                        <Typography varaint=\"h5\"> <CountUp start={0} end={recovered.value} ></CountUp></Typography>\r\n                   <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                  <Typography varaint=\"body2\">Number Of Recoveries By COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Infected\r\n                        </Typography>\r\n                        <Typography varaint=\"h5\"> <CountUp start={0} end={deaths.value} ></CountUp></Typography>\r\n                   <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                  <Typography varaint=\"body2\">Number Deaths caused by COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.active)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Infected\r\n                        </Typography>\r\n                        <Typography varaint=\"h5\"> <CountUp start={0} end={confirmed.value-(recovered.value+deaths.value)} ></CountUp></Typography>\r\n                   <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                  <Typography varaint=\"body2\">Active cases</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n\r\n      \r\n        \r\n    )\r\n}\r\nexport default Cards;","import axios from 'axios';\r\nconst url= 'https://covid19.mathdro.id/api';\r\n\r\n\r\nexport const FetchData=async(country)=>{\r\n    let changeurl=url;\r\n    if(country){\r\n        changeurl=`${url}/countries/${country}`\r\n    }\r\n    try{\r\n        const {data:{confirmed,recovered,deaths,lastUpdate}}=await axios.get(changeurl);\r\n       const modified={\r\n           confirmed,\r\n           recovered,\r\n           deaths,\r\n           lastUpdate\r\n       }\r\n       \r\n        return modified;\r\n    } catch(error){\r\n\r\n    }\r\n}\r\nexport const fetchDailyData=async()=>{\r\ntry{\r\n    const {data}=await axios.get(`${url}/daily`);\r\n//console.log(data);\r\nconst modifiedData=data.map((dailyData)=>({\r\nconfirmed:dailyData.confirmed.total,\r\ndeaths:dailyData.deaths.total,\r\ndate:dailyData.reportDate,\r\n\r\n}))\r\nreturn modifiedData;\r\n} catch(error){\r\n\r\n}\r\n}\r\nexport const countries=async ()=>{\r\ntry{\r\n    const {data:{countries}} =await axios.get(`${url}/countries`);\r\n    return countries.map((country)=>country.name);\r\n   // console.log(data);\r\n} catch (error) {\r\n    console.log(error);\r\n}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React,{useState,useEffect} from 'react';\r\nimport {fetchDailyData} from '../../axios'\r\nimport {Line,Bar} from 'react-chartjs-2'\r\nimport styles from './chart.module.css'\r\n\r\nconst Chart=({data:{confirmed,deaths,recovered},country})=>{\r\n    const [dailyData,setdailydata]=useState([]);\r\n    useEffect(() => {\r\n        const fetchAPI=async()=>{\r\nsetdailydata(await fetchDailyData())\r\n        }\r\n       // console.log(dailyData);\r\n        fetchAPI();\r\n        \r\n    }, []);\r\n\r\n\r\n    const barchart=(\r\n        confirmed\r\n        ?(\r\n            <Bar\r\n            data={{\r\n                labels:['Infected','recovered','deaths'],\r\n                datasets:[{\r\n                    label:'people',\r\n                    backgroundColor:[\r\n                     'rgba(0,0,255,.5)',\r\n                     'rgba(0,255,.5)',\r\n                     'rgba(255,0,0,.5)'  \r\n                    ],\r\n                    data:[confirmed.value,recovered.value,deaths.value],\r\n                }]\r\n    \r\n            }}\r\n            option={{\r\n                legent:{display:false},\r\n                title:{display:true,text:`current state in ${country}`},\r\n            }}\r\n            />\r\n        ):null\r\n    )\r\n\r\n    const linechart=(\r\n        dailyData.length\r\n        ? (\r\n            <Line\r\n            data={{\r\n                labels:dailyData.map(({date})=>date),\r\n                datasets:[{\r\ndata:dailyData.map(({confirmed})=>confirmed),\r\nlabel:'Infected',\r\nborderColor:'#3333ff',\r\nfill:true,\r\n                },\r\n{\r\n    data:dailyData.map(({deaths})=>deaths),\r\nlabel:'Deaths',\r\nborderColor:'red',\r\nbackgroundColor:'rgba(255,0,0,.5)',\r\nfill:true,\r\n},\r\n\r\n\r\n                ],\r\n            }}\r\n            />\r\n        ):null\r\n    );\r\n   \r\n\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n       { country? barchart:linechart}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default Chart;","import React,{useState,useEffect} from 'react';\r\nimport {NativeSelect,FormControl } from '@material-ui/core'\r\nimport {countries} from '../../axios';\r\nimport styles from './country.module.css';\r\n//import {countries} from '../../axios';\r\n\r\nconst Country=({handlecountrychange})=>{\r\n    const [fetchcountries,setfetchcountries]= useState([]);\r\n    useEffect(() => {\r\n        const fetchAPI=async ()=>{\r\n            setfetchcountries(await countries());\r\n        }\r\n        fetchAPI();\r\n            \r\n        \r\n    }, [setfetchcountries]);\r\n    //console.log(fetchcountries);\r\n    return(\r\n        <FormControl className={styles.FormControl}>\r\n          \r\n            <NativeSelect defaultValue='' onChange={(e)=>handlecountrychange(e.target.value)}>\r\n              <option value=\"global\">global</option>  \r\n              {fetchcountries.map((country,i)=><option key={i} value={country}>{country}</option>\r\n            )};\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\nexport default Country;","import React, { Component } from 'react'\nimport './App.css';\nimport Cards from './components/card/card';\nimport Chart from './components/chart/chart';\nimport Country from './components/country/country';\nimport styles from './App.module.css';\nimport {FetchData} from './axios';\nimport covid from './covid.png';\nclass App extends Component {\n  state={\n    data:{},\n    country:'',\n\n  }\n async componentDidMount(){\n    const Fetchdata = await FetchData();\n    this.setState({data:Fetchdata})\n  }\n  handlecountrychange= async (country)=>{\n   //console.log(country);\n    const fetchdata = await FetchData(country);\n    //console.log(fetchdata);\n    this.setState({data:fetchdata,country:country});\n  }\n  render(){\n    const {data}=this.state;\n  return (\n    <div className={styles.container}>\n      <img className={styles.image} src={covid} />\n      <Cards data={data}/>\n      <Country handlecountrychange={this.handlecountrychange}/>\n      <Chart data={data} country={this.state.country}/>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1AJdh\",\"image\":\"App_image__2uA72\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"chart_container__3g02P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formcontrol\":\"country_formcontrol__Koprs\"};","module.exports = __webpack_public_path__ + \"static/media/covid.08708a2f.png\";"],"sourceRoot":""}